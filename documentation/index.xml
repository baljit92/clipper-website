<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation on Clipper</title>
    <link>http://clipper.ai/documentation/</link>
    <description>Recent content in Documentation on Clipper</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 May 2017 17:52:40 -0700</lastBuildDate>
    
	<atom:link href="http://clipper.ai/documentation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Managing a Clipper Instance</title>
      <link>http://clipper.ai/documentation/clipper_manager/</link>
      <pubDate>Tue, 23 May 2017 09:08:41 -0700</pubDate>
      
      <guid>http://clipper.ai/documentation/clipper_manager/</guid>
      <description>You can use the Clipper manager Python library to start and manage a Clipper instance.
The Clipper manager library can be installed with pip. We recommend using Anaconda as your Python installation.
pip install clipper_admin  A user guide and hosted API docs for the Clipper manager are coming soon. Until then, the best place to find API documentation are the method comments in the clipper_manager.py source code.</description>
    </item>
    
    <item>
      <title>Python Model Deployment</title>
      <link>http://clipper.ai/documentation/python_model_deployment/</link>
      <pubDate>Tue, 23 May 2017 09:07:44 -0700</pubDate>
      
      <guid>http://clipper.ai/documentation/python_model_deployment/</guid>
      <description>Clipper supports a simplified process for deploying arbitrary Python prediction functions as model-containers.
The Clipper management library supports this functionality through deploy_prediction_func, which consumes a function you want to deploy. All dependencies for the function must be installed with Anaconda or Pip. deploy_prediction_func must be called from within an Anaconda environment that tracks all such dependencies.
Defining your prediction function Prediction functions should take a list of inputs of type &amp;lt;input-type&amp;gt; and return a Python list of strings (often JSON strings, but JSON is not required).</description>
    </item>
    
  </channel>
</rss>