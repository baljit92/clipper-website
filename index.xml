<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clipper</title>
    <link>http://clipper.ai/</link>
    <description>Recent content on Clipper</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 May 2017 17:53:26 -0700</lastBuildDate>
    
	<atom:link href="http://clipper.ai/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Concepts</title>
      <link>http://clipper.ai/tutorials/basic_concepts/</link>
      <pubDate>Wed, 13 Sep 2017 10:22:11 -0700</pubDate>
      
      <guid>http://clipper.ai/tutorials/basic_concepts/</guid>
      <description>This tutorial is organized as a tour of the Clipper Admin API. It will walk you through the key concepts needed to understand how to create a Clipper cluster and deploy models to it, explaining each concept as it comes up.
A Clipper Cluster A running Clipper cluster consists of a collection of Docker containers communicating with each other over the network. As you issue commands against Clipper using the Clipper Admin tool, you are communicating with these containers as well as creating new ones or destroying existing ones.</description>
    </item>
    
    <item>
      <title>Example: XGBoost Deployment</title>
      <link>http://clipper.ai/tutorials/xgboost_deployment/</link>
      <pubDate>Mon, 12 Mar 2018 17:08:30 -0700</pubDate>
      
      <guid>http://clipper.ai/tutorials/xgboost_deployment/</guid>
      <description>A guide to deploy XGBoost Models This tutorial will assume that you have already installed clipper_admin and its dependencies.
 In order to keep the base images small, containers limit the packages they come with default; however, Clipper also supports the installation of additional packages onto model containers using pip. Packages such as XGBoost can be installed and deployed in this way.
The following tutorial is written in Python. First, we start Clipper.</description>
    </item>
    
    <item>
      <title>Example: Querying Clipper with Images</title>
      <link>http://clipper.ai/tutorials/image_query/</link>
      <pubDate>Mon, 12 Mar 2018 17:08:30 -0700</pubDate>
      
      <guid>http://clipper.ai/tutorials/image_query/</guid>
      <description>Please checkout examples/image_query for two image scenarios:
 Encode images as bytes Embed images in serialized json and send the query as strings  </description>
    </item>
    
    <item>
      <title>Container Orchestration</title>
      <link>http://clipper.ai/tutorials/container_managers/</link>
      <pubDate>Wed, 13 Sep 2017 10:22:30 -0700</pubDate>
      
      <guid>http://clipper.ai/tutorials/container_managers/</guid>
      <description>Clipper is built on top of Docker containers. A running Clipper cluster consists of a collection of Docker containers communicating with each other over the network. As you issue commands against Clipper using the admin tool, you are communicating with these containers as well as creating new ones or destroying existing ones.
The main API for interacting with Clipper is exposed via a ClipperConnection object. This is your handle to a Clipper cluster.</description>
    </item>
    
    <item>
      <title>R Deployment</title>
      <link>http://clipper.ai/tutorials/r-deployment/</link>
      <pubDate>Wed, 13 Sep 2017 10:23:21 -0700</pubDate>
      
      <guid>http://clipper.ai/tutorials/r-deployment/</guid>
      <description>Rclipper Rclipper is a package for building serveable Clipper models from R functions. Given an API-compatible R function, Rclipperâ€™s build_model function builds a Docker image for a Clipper model. This model can then be deployed to Clipper via the Python clipper_admin package.
Dependencies Rclipper depends on the Python clipper_admin package for building and deploying models. In order to use this admin package, Docker for Python must also be installed.</description>
    </item>
    
    <item>
      <title>Monitoring Clipper Metrics</title>
      <link>http://clipper.ai/tutorials/metrics/</link>
      <pubDate>Tue, 13 Mar 2018 10:23:10 -0700</pubDate>
      
      <guid>http://clipper.ai/tutorials/metrics/</guid>
      <description>Starting in Clipper v0.3.x, Clipper reports metrics to a Prometheus server.
Prometheus Server We use Prometheus as the metric tracking system. When you start a Clipper cluster, a Prometheus instance is automatically started for you. If you are using DockerContainerManager, you can view Prometheus UI at: http://localhost:9090. If you are using KubernetesContainerManager, the Prometheus address is dynamically generated by Kubernetes. You can fetch the address for your cluster by calling clipper_conn.</description>
    </item>
    
    <item>
      <title>REST API Documentation</title>
      <link>http://clipper.ai/tutorials/rest/</link>
      <pubDate>Tue, 12 Sep 2017 23:45:24 -0700</pubDate>
      
      <guid>http://clipper.ai/tutorials/rest/</guid>
      <description>Both Clipper&amp;rsquo;s management and query interfaces expose a REST API. While we provide the Clipper Admin client library as a convenient Python wrapper around the management functionality, you can also use the REST API directly, or create your own client libraries in other languages. You can find the full REST documentation below. If you create a client library in another language (e.g. several users have expressed interest in a Go implementation), consider contributing it back to the project as an official client library.</description>
    </item>
    
    <item>
      <title>Creating a Custom Model Container</title>
      <link>http://clipper.ai/tutorials/custom_model_container/</link>
      <pubDate>Tue, 13 Mar 2018 10:23:10 -0700</pubDate>
      
      <guid>http://clipper.ai/tutorials/custom_model_container/</guid>
      <description>If none of the provided model deployers meet your needs, you will need to create your own model container. In this tutorial, we will walk through two common use cases for creating your own model containers.
 Your prediction function can still be pickled (see the cloudpickle documentation to determine whether your function can be pickled), but requires custom packages that are not available via Pip. Your prediction function cannot be pickled, and you want to hardcode the model inside the container.</description>
    </item>
    
    <item>
      <title>Troubleshooting</title>
      <link>http://clipper.ai/tutorials/troubleshooting/</link>
      <pubDate>Wed, 13 Sep 2017 10:22:56 -0700</pubDate>
      
      <guid>http://clipper.ai/tutorials/troubleshooting/</guid>
      <description>Guidance on how to identify and fix some common errors.
Identifying the cause of default predictions There are a few reasons why your application may be returning default predictions. Your first debugging clue is the &amp;ldquo;default_explanation&amp;rdquo; field in the response body.
No connected models found for query This means that Clipper could not find any model containers to route your request to. Here are some steps to debug this problem.</description>
    </item>
    
  </channel>
</rss>