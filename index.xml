<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clipper</title>
    <link>http://clipper.ai/</link>
    <description>Recent content on Clipper</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 May 2017 17:53:26 -0700</lastBuildDate>
    
	<atom:link href="http://clipper.ai/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Managing a Clipper Instance</title>
      <link>http://clipper.ai/documentation/clipper_manager/</link>
      <pubDate>Tue, 23 May 2017 09:08:41 -0700</pubDate>
      
      <guid>http://clipper.ai/documentation/clipper_manager/</guid>
      <description>You can use the Clipper manager Python library to start and manage a Clipper instance.
The Clipper manager library can be installed with pip. We recommend using Anaconda as your Python installation.
pip install clipper_admin  A user guide and hosted API docs for the Clipper manager are coming soon. Until then, the best place to find API documentation are the method comments in the clipper_manager.py source code.</description>
    </item>
    
    <item>
      <title>Quickstart</title>
      <link>http://clipper.ai/overview/quickstart/</link>
      <pubDate>Sat, 20 May 2017 18:01:34 -0700</pubDate>
      
      <guid>http://clipper.ai/overview/quickstart/</guid>
      <description>The easiest way to get started using Clipper is to install the clipper_admin pip package and use it interactively from a Python REPL. The Clipper admin contains the Clipper manager which can be used to start and manage a Clipper instance.
Dependencies: Before using Clipper, you must install Docker and Docker-Compose Docker Compose and the Anaconda Python distribution.
 $ pip install clipper_admin $ python  Once you have the clipper_admin package installed, you can use it to start a Clipper instance and deploy your first model.</description>
    </item>
    
    <item>
      <title>Python Model Deployment</title>
      <link>http://clipper.ai/documentation/python_model_deployment/</link>
      <pubDate>Tue, 23 May 2017 09:07:44 -0700</pubDate>
      
      <guid>http://clipper.ai/documentation/python_model_deployment/</guid>
      <description>Clipper supports a simplified process for deploying arbitrary Python prediction functions as model-containers.
The Clipper management library supports this functionality through deploy_prediction_func, which consumes a function you want to deploy. All dependencies for the function must be installed with Anaconda or Pip. deploy_prediction_func must be called from within an Anaconda environment that tracks all such dependencies.
Defining your prediction function Prediction functions should take a list of inputs of type &amp;lt;input-type&amp;gt; and return a Python list of strings (often JSON strings, but JSON is not required).</description>
    </item>
    
    <item>
      <title>Image Classification Tutorial</title>
      <link>http://clipper.ai/overview/tutorial/</link>
      <pubDate>Sat, 20 May 2017 19:16:04 -0700</pubDate>
      
      <guid>http://clipper.ai/overview/tutorial/</guid>
      <description>This tutorial will walk you through the process of starting Clipper, creating an application, querying the application, and deploying models to improve application accuracy.
The tutorial uses the Clipper client management Python library for controlling Clipper. While this is the simplest way to manage Clipper, the client library is simply a convenience wrapper around a standardized management REST interface which can be queried with any REST client.
Setup The tutorial runs Clipper in Docker containers and orchestrates them with Docker-Compose, so you must have Docker and Docker-Compose installed.</description>
    </item>
    
    <item>
      <title>Container Implementation</title>
      <link>http://clipper.ai/design_docs/container_implementation/</link>
      <pubDate>Sat, 20 May 2017 18:23:55 -0700</pubDate>
      
      <guid>http://clipper.ai/design_docs/container_implementation/</guid>
      <description>Container Implementation Details The following is relevant for the implementation of model containers in different languages. Model containers must implement functionality consistent with this information.
Socket Creation  Create a ZeroMQ Dealer socket. This socket can receive requests and send responses asynchronously.
 Python example:   import zmq context = zmq.Context(); socket = context.socket(zmq.DEALER)   Initializing a Connection  Once a ZeroMQ Dealer socket has been created, use it to connect to Clipper.</description>
    </item>
    
  </channel>
</rss>